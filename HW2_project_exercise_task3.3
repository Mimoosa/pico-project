from filefifo import Filefifo # To read data from a file in FIFO
from machine import Pin, I2C # For controlling pins and I2C interface
from ssd1306 import SSD1306_I2C  # Import the SSD1306 OLED display driver
from fifo import Fifo
import micropython
micropython.alloc_emergency_exception_buf(200) # Allocate buffer for emergency exception handling

# Define a class to manage the rotary encoder and OLED display
class Encoder:
    def __init__(self, rot_a, rot_b):
        # Initialize the rotary encoder pins for reading rotation
        self.a = Pin(rot_a, mode=Pin.IN, pull=Pin.PULL_UP) # Pin for encoder A
        self.b = Pin(rot_b, mode=Pin.IN, pull=Pin.PULL_UP) # Pin for encoder B
        
        self.i2c = I2C(1, scl=Pin(15), sda=Pin(14), freq=400000) # Initialize I2C for OLED
        self.oled_width = 128 # OLED width
        self.oled_height = 64 # OLED height
        self.oled = SSD1306_I2C(self.oled_width, self.oled_height, self.i2c) # Create OLED object
        
        # Initialize Filefifo to read from a file and Fifo to handle events
        self.data = Filefifo(10, name = 'capture_250Hz_01.txt')
        self.fifo = Fifo(30, typecode='i') # Create FIFO queue for events
        # Set up an interrupt for the encoder’s rotation
        self.a.irq(handler=self.turning_encoder_handler, trigger=Pin.IRQ_RISING, hard=True) # Set up interrupt for encoder turns
        
        self.data_list = [] # List to store data values from file
        # Load data and find peaks (min and max values)
        self.create_data_list()
        self.find_peaks_from_data_list()
        
        self.count_index = 0 # Track current position in the data list
        self.last_index = 128 # Set the maximum scroll position (end of window)
        self.window_start = 0 # Starting point of the displayed data window
        
        # Display initial data window
        self.display_window()
        
  
    # Define handler for rotary encoder rotation events
    def turning_encoder_handler(self, pin):
        # Check encoder B state to determine rotation direction
        if self.b(): # Counter-clockwise rotation
            self.fifo.put(-1) # Put -1 in the FIFO for counter-clockwise rotation
            
        else: # Clockwise rotation
            self.fifo.put(1) # Put a value to indicate clockwise turn # Put 1 in the FIFO for clockwise rotation
    
    # Reads 1000 values from the file and stores them in data_list
    def create_data_list(self):
        for _ in range(1000):
            value = self.data.get() # Retrieve value from Filefifo
            self.data_list.append(value) # Append value to data_list
    
    # Finds the minimum and maximum values in the data list and prints them
    def find_peaks_from_data_list(self):            
        min_value = min(self.data_list)# Calculate minimum value
        print(f"The minimum value from the data is {min_value}.")
        
        max_value = max(self.data_list) # Calculate maximum value
        print(f"The maximum value from the data is {max_value}.")
    
    
    # Displays a window of 8 values from data_list on the OLED screen
    def display_window(self):
        
        self.oled.fill(0) # Clear OLED screen
        y_position = 0 # Initialize Y position for text display
        
        # Loop through and display 8 values from data_list within the window
        for i in range(8):  
            data_index = self.window_start + i # Calculate index for each value
            if data_index < 127:  # Ensure we stay within the list range
                value = self.data_list[data_index] # Retrieve the value
             
                self.oled.text(str(value), 0, y_position, 1)  # Display value at the current Y position
                
                y_position += 8 # Move down for the next line of text
            
        
        self.oled.show() # Update OLED display with new content


    # Updates the scroll position based on rotation direction and displays the window   
    def update_scroll_position(self, direction):
        # Update scroll window and highlight index based on direction
        if direction == 1:  # Clockwise rotation
            if self.count_index < self.last_index: # Check to avoid exceeding last index
                self.count_index += 1 # Move to the next data index
            
            # Shift window forward if we’ve reached the end of visible values and haven’t reached the end
            if self.count_index - self.window_start > 7 and self.count_index < 127:
                self.window_start += 1 # Move window start forward

        elif direction == -1:  # Counter-clockwise rotation 
            if self.count_index  > 0: # Check to avoid going below the start index
                self.count_index -= 1 # Move to the previous data index
            
            # Shift window back if we’re at the beginning of the visible window
            if self.count_index - self.window_start < 0:
                self.window_start -= 1 # Move window start back

        self.display_window() # Refresh the OLED display with updated window
            
            
            
# Instantiate the Encoder class with specified pin numbers for the encoder 
rot = Encoder(10, 11)

# Main loop to handle FIFO events and update the display
while True:
    # Main loop for handling events from the FIFO queue
    if rot.fifo.has_data(): # Check if there’s data in the FIFO queue
      
        direction = rot.fifo.get() # Get the rotation direction from FIFO
        rot.update_scroll_position(direction) # Update display based on rotation    
