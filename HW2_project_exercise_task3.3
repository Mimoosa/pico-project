from filefifo import Filefifo # To read data from a file in FIFO
from machine import Pin, I2C # For controlling pins and I2C interface
from ssd1306 import SSD1306_I2C  # Import the SSD1306 OLED display driver
from fifo import Fifo
import micropython
micropython.alloc_emergency_exception_buf(200) # Allocate buffer for emergency exception handling

# Define a class to manage the rotary encoder and OLED display
class Encoder:
    def __init__(self, rot_a, rot_b):
        # Initialize the rotary encoder pins for reading rotation
        self.a = Pin(rot_a, mode=Pin.IN, pull=Pin.PULL_UP) # Pin for encoder A
        self.b = Pin(rot_b, mode=Pin.IN, pull=Pin.PULL_UP) # Pin for encoder B
        
        self.i2c = I2C(1, scl=Pin(15), sda=Pin(14), freq=400000) # Initialize I2C for OLED
        self.oled_width = 128 # OLED width
        self.oled_height = 64 # OLED height
        self.oled = SSD1306_I2C(self.oled_width, self.oled_height, self.i2c) # Create OLED object
        
        # Initialize Filefifo to read from a file and Fifo to handle events
        self.data = Filefifo(10, name = 'capture_250Hz_01.txt')
        self.fifo = Fifo(30, typecode='i') # Create FIFO queue for events
        # Set up an interrupt for the encoder’s rotation
        self.a.irq(handler=self.turning_encoder_handler, trigger=Pin.IRQ_RISING, hard=True) # Set up interrupt for encoder turns
        
        self.data_list = []  # Raw data list
        self.scaled_data_list = [] # Scaled data list
 
        self.create_data_list() # Read 1000 values into the list
        
        self.min_value = 0 # Initialize minimum value
        self.max_value = 0 # Initialize maximum value
        
        self.find_peaks_and_scale_signals()# Initialize maximum value
        
        self.window_start_index = 0 # Starting index for scrolling
        self.last_index = 1000 # Total number of data points
        self.window_size = 128 # Number of values to display at a time

        
        # Display the initial data window on the OLED screen
        self.display_window()
        
  
    # Interrupt handler for rotary encoder rotation
    def turning_encoder_handler(self, pin):
        # Check encoder B state to determine rotation direction
        if self.b(): # Counter-clockwise rotation
            self.fifo.put(-1) # Put -1 in the FIFO for counter-clockwise rotation
            
        else: # Clockwise rotation
            self.fifo.put(1) # Put a value to indicate clockwise turn # Put 1 in the FIFO for clockwise rotation
    
    # Reads 1000 values from the file and stores them in data_list
    def create_data_list(self):
        for _ in range(1000):
            value = self.data.get() # Read value from Filefifo
            self.data_list.append(value) # Append value to the data_list
    
    # Find minimum and maximum values and scale the data for display
    def find_peaks_and_scale_signals(self):            
        self.min_value = min(self.data_list)# Find minimum value
          
        self.max_value = max(self.data_list) # Find maximum value
        
        for i in self.data_list:
            # Scale values to fit within the OLED screen's height
            scaled_value = int(((i - self.min_value) / (self.max_value - self.min_value)) * 100)
            self.scaled_data_list.append(scaled_value)
    
    
    # Displays a window of 128 values on the OLED screen
    def display_window(self):
        
        self.oled.fill(0) # Clear OLED screen
        x_position = 0 # Initialize X position for plotting
      
        for i in range(self.window_size):
            current_index = i + self.window_start_index # Calculate the current index in the data
            
            y_position = int(self.scaled_data_list[current_index] * (self.oled_height - 1) / 100) # Scale to OLED height
            self.oled.pixel(x_position, y_position, 1) # Draw the pixel
            x_position += 1  # Move to the next X position
            
            
        self.oled.show() # Update OLED display


    # Updates the scroll position based on rotation direction and displays the window   
    def update_scroll_position(self, direction):
   
        if direction == 1:  # Clockwise rotation
            if self.window_start_index < self.last_index - self.window_size: # Check to avoid exceeding last index
                self.window_start_index += 1 
            

        elif direction == -1:  # Counter-clockwise rotation 
            if self.window_start_index  > 0: # Prevent scrolling before the first index
                self.window_start_index -= 1 
     

        self.display_window() # Refresh the OLED display with updated window
            
            
            
# Instantiate the Encoder class with specified pin numbers for the encoder 
rot = Encoder(10, 11)

# Main loop to handle FIFO events and update the display
while True:
    # Main loop for handling events from the FIFO queue
    if rot.fifo.has_data(): # Check if there’s data in the FIFO queue
      
        direction = rot.fifo.get() # Get the rotation direction from FIFO
        rot.update_scroll_position(direction) # Update the scroll position and refresh the display   
